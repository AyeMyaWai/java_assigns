package com.example;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
import java.util.stream.*;

public class LibraryManagement {
	private static List<Member> memberList = new ArrayList<Member>();
	static List<Book> bookList = new ArrayList<Book>();
	static String custom_value = null;
    static int limit_runtime = 0;
    static String inputmemberId = null;
	public static void main(String[] args) {
		boolean status = true;

		do {
		   limit_runtime=limit_runtime+1;
			String number = initialDisplay();
			switch (number) {
			// Case statements
			case "1":
				displayAllBooks();
				break;
			case "2":
				displayallMembers();
				break;
			case "3":
				lendBook();
				break;
			case "4":
				ReturnBook();
				break;

			case "5":
				exit();
				break;
			// Default case statement
			default:
				showErrorMessage();
			}

		} while (status);
	}

	static String initialDisplay() {
		String number = null;
		if(limit_runtime==1) {
		addBookList();
		addMemberList();
		}
		System.out.println("Welcome to the library management system. Please choose an option");
		System.out.println("1. Display All Books");
		System.out.println("2. Display All Members");
		System.out.println("3. Lend Book");
		System.out.println("4.Return Book");
		System.out.println("5. Exit");
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Enter Your Choice");
		try {
			number = reader.readLine();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} // taking string input

		return number;

	}

	static void addMemberList() {
		//List<Integer> borrowedBooks = new ArrayList<Integer>();
		//List<Integer> borrowedBooks1 = new ArrayList<Integer>();

	//	borrowedBooks.add("Book1");
	//	borrowedBooks.add("Book1");
		Member member1 = new Member(1, "John", new ArrayList<Integer>());
		Member member2 = new Member(2, "Mike", new ArrayList<Integer>());
		memberList.add(member1);
		memberList.add(member2);
	}

	static void addBookList() {
		Book book1 = new Book(1, "The Lord of the Rings", 0);
		Book book2 = new Book(2, "The Hobbit", 0);
		Book book3 = new Book(3, "Harray Potter and the Philosopher's Stone", 0);
		Book book4 = new Book(4, "Harry Potter and the Chamber of Secrets", 0);
		bookList.add(book1);
		bookList.add(book2);
		bookList.add(book3);
		bookList.add(book4);
	}

	static void displayAllBooks() {
		System.out.println(" ***  Book Lists ***");

		bookList.stream().forEach(data -> data.showBook());

	}

	static void displayallMembers() {
		System.out.println(" ***  Member Lists ***");
		memberList.stream().forEach(data -> data.showMember());

	}

	static void lendBook() {
		custom_value = "lendBook";
		commonFunction();
	}

	static void commonFunction() {
		String book_Input = null;
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Enter book ID:");
		try {

			book_Input = reader.readLine();
			int book_id = Integer.parseInt(book_Input);
			List<Book> filter_array = bookList.stream().filter(data -> data.getBookId() == book_id)
					.collect(Collectors.toList());
			int array_size = filter_array.size();
			if (array_size >= 1) {
				if (custom_value.equals("lendBook")) {
					filter_array.forEach(result -> {
						if (result.getLendFlag() == 1) {
							System.out.println("Your choise is already lended.");
							commonFunction();
						} else {
							enterMemberID(book_id);

						}
					});
				} else if (custom_value.equals("returnBook")) {
					enterMemberID(book_id);
				}
			} else {
				System.out.println("Please enter correct book ID");
				lendBook();
			}

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	static void enterMemberID(int book_id) {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Enter member Id");
		try {
			 inputmemberId = reader.readLine();
			int memberId = Integer.parseInt(inputmemberId);

			List<Member> filter_member = memberList.stream().filter(data -> data.getMemberId() == memberId)
					.collect(Collectors.toList());
           
			int member_array_size = filter_member.size();
			System.out.println("Size"+member_array_size);
			if (member_array_size > 0) {
				
			
					filter_member.stream().forEach(data-> {
					if(data.getMemberId()== memberId) {
						//System.out.println(data.getMemberId()+"<<< MEMBER ID ");
						if (custom_value == "lendBook") {
						data.setBorrowedBooks(book_id);
						}
						else if(custom_value == "returnBook") {
						data.getBorrowedBooks().stream().filter(result->
						result != book_id).collect(Collectors.toList());
						}
						//System.out.println(data.getBorrowedBooks()+"<<<<<");
					}
				});
				
				
				
				bookList.stream().forEach(data -> {
					if (data.getBookId() == book_id) {
						System.out.println(custom_value);
						if (custom_value == "lendBook") {
						
							data.setLendFlag(1);
						} else if (custom_value == "returnBook") {
							data.setLendFlag(0);
						}
					}
				});

				displayAllBooks();
				// bookList.stream().filter(data->data.getBookId())
				System.out.println("Thank You");

			} else {
				System.out.println("Please enter correct member ID.");
				enterMemberID(book_id);

			}

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	static void ReturnBook() {
		custom_value = "returnBook";
		commonFunction();
	}

	static void showErrorMessage() {
		System.out.println("Invalid choice.Please enter a number from 1-5");
	}

	static void exit() {

	}

}
